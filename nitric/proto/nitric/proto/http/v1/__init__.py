# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: proto/http/v1/http.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class HttpProxyRequest(betterproto.Message):
    host: str = betterproto.string_field(1)
    """The local port the server can be accessed on"""


@dataclass(eq=False, repr=False)
class HttpProxyResponse(betterproto.Message):
    pass


class HttpStub(betterproto.ServiceStub):
    async def proxy(
        self,
        http_proxy_request: "HttpProxyRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "HttpProxyResponse":
        return await self._unary_unary(
            "/nitric.proto.http.v1.Http/Proxy",
            http_proxy_request,
            HttpProxyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class HttpBase(ServiceBase):
    async def proxy(
        self, http_proxy_request: "HttpProxyRequest"
    ) -> "HttpProxyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_proxy(
        self, stream: "grpclib.server.Stream[HttpProxyRequest, HttpProxyResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.proxy(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/nitric.proto.http.v1.Http/Proxy": grpclib.const.Handler(
                self.__rpc_proxy,
                grpclib.const.Cardinality.UNARY_UNARY,
                HttpProxyRequest,
                HttpProxyResponse,
            ),
        }
